#Warn All, Off
#SingleInstance

^F1::{
	;This is the main test function
	main()
}

^F2::{
	reload()
}

^F3::{
	issueAlarm()
}

^F4::{
	getMouseCoords()
}

^F5::{
	reload()
}

main(){

}

realClick(delay := 30){
	MouseClick("Left",,,1,20,"Down")
	Sleep(delay)
	MouseClick("Left",,,1,20,"Up")
}

getMouseCoords(){
	; This is for mouse position tracking
	MouseGetPos OutputVarX, OutputVarY
	ColorVar := 0
	OutputVarX := OutputVarX ;- 10
	OutputVarY := OutputVarY ;- 10
	PixelGetColor ColorVar, OutputVarX, OutputVarY
	A_Clipboard := Format("{1}, {2}", OutputVarX, OutputVarY)
	msgbox(Format("This is coords: {1}, {2}, The color is {3}",OutputVarX, OutputVarY,ColorVar))
	return
}

detector(path){
	; This function detects images on screen.
	ErrorLvl := ImageSearch(FoundX, FoundY, 0, 0, 1920, 1080, A_ScriptDir . "" . path)
	if(ErrorLvl = 1) {
		;MsgBox path." was found at " . FoundX . "x" . FoundY
		return [FoundX, FoundY]
	}
	else{
		;MsgBox(A_ScriptDir . "/images/GC/" . path . " was NOT found.")
		return false
	}
}

chat(text, delay){
	Send("{Enter}")
	Sleep(delay)
	SetKeyDelay(2,1)
	SendEvent(text)
	Sleep(delay)
	Send("{Enter}")
}

pressKey(charkey, count := 1, ms := 30){
    Loop count
    {
        Send("{" . charkey . " down}")
        Sleep(ms)
        Send("{" . charkey . " up}")
        Sleep(ms)
    }
}

issueAlarm(delay := 5, step := 100, stepDuration := 100, beeps := 8, i:=0){
	Loop(beeps){
		SoundBeep(step + i * step, stepDuration)
		Sleep(stepDuration + delay)
		i++
	}
}
